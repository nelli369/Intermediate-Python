Line plot (1)
With matplotlib, you can create a bunch of different plots in Python. 
The most basic plot is the line plot. A general recipe is given here.

import matplotlib.pyplot as plt
plt.plot(x,y)
plt.show()

Instructions

print() the last item from both the year and the pop list to see what the 
predicted population for the year 2100 is. Use two print() functions.
 LINE PLOTS////////
Before you can start, you should import matplotlib.pyplot as plt. pyplot is a
 sub-package of matplotlib, hence the dot.
Use plt.plot() to build a line plot. year should be mapped on the 
horizontal axis, pop on the vertical axis.
 Don't forget to finish off with the show() function to actually display the plot.

# Print the last item from year and pop
print(year[-1]),
print(pop[-1])


# Import matplotlib.pyplot as plt
import matplotlib.pyplot as plt

# Make a line plot: year on the x-axis, pop on the y-axis
plt.plot(year, pop)

# Display the plot with plt.show()
plt.show()


_______________________________________________________________________________________
Scatter Plot (1)
When you have a time scale along the horizontal axis, 
the line plot is your friend. But in many other cases, 
when you're trying to assess if there's a correlation between two variables,
 for example, the scatter plot is the better choice. Below is an example of 
how to build a scatter plot.

import matplotlib.pyplot as plt
plt.scatter(x,y)
plt.show()


# Change the line plot below to a scatter plot
plt.plot(gdp_cap, life_exp),
plt.scatter(gdp_cap, life_exp)
# Put the x-axis on a logarithmic scale
plt.xscale('log')

# Show plot
plt.show()

____________________________________________________________________________________________


