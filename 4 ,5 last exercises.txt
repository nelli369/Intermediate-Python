Write a for loop that iterates over all elements of 
the areas list and prints out every element separately.

# areas list
areas = [11.25, 18.0, 20.0, 10.75, 9.50]

# Code the for loop
for a in areas:
     print (a)
_____________
Using a for loop to iterate over a list only gives you access to every 
list element in each run, one after the other. If you also want to access the index 
information, so where the list element you're iterating over is located, you can use enumerate().

As an example, have a look at how the for loop from the video was converted:

fam = [1.73, 1.68, 1.71, 1.89]
for index, height in enumerate(fam) :
    print("person " + str(index) + ": " + str(height))
________________________________________________________________________________________
Adapt the for loop in the sample code to use enumerate() and use two iterator variables.
Update the print() statement so that on each run, a line of the form "room x: y" should be printed,
 where x is the index of the list element and y is the actual list element, i.e. the area. 
Make sure to print out this exact string, with the correct spacing.


# areas list
areas = [11.25, 18.0, 20.0, 10.75, 9.50]

# Change for loop to use enumerate() and update print()
for index,  a in enumerate(areas) :
    print("room" + str(index) + ":" + str(a))

___________________________________________________________________________________________
Adapt the print() function in the for loop on the right so that the first printout becomes 
"room 1: 11.25", the second one "room 2: 18.0" and so on.

# areas list
areas = [11.25, 18.0, 20.0, 10.75, 9.50]

# Code the for loop
for index, area in enumerate(areas) :
    print("room " + str(index+1) + ": " + str(area))

_______________________________________________________________________________________
Write a for loop that goes through each sublist of house 
and prints out the x is y sqm, where x is the name 
of the room and y is the area of the room.

# house list of lists
house = [["hallway", 11.25], 
         ["kitchen", 18.0], 
         ["living room", 20.0], 
         ["bedroom", 10.75], 
         ["bathroom", 9.50]]
         
# Build a for loop from scratch
for x in house:
    print('the ' + str(x[0]) + ' is ' + str(x[1]) + ' sqm')

______________________________________________________

Loop over dictionary
In Python 3, you need the items() method to loop over a 
dictionary:

world = { "afghanistan":30.55, 
          "albania":2.77,
          "algeria":39.21 }

for key, value in world.items() :
    print(key + " -- " + str(value))
Remember the europe dictionary that contained the names of 
some European countries as key and their capitals as 
corresponding value? Go ahead and write a loop to iterate over
 it!

_______________________________________________________________
Write a for loop that goes through each key:value pair of europe. On each iteration, "the capital of x is y" should be printed out, where x 
is the key and y is the value of the pair.
# Definition of dictionary
europe = {'spain':'madrid', 'france':'paris', 'germany':'berlin',
          'norway':'oslo', 'italy':'rome', 'poland':'warsaw', 'austria':'vienna' }
          
# Iterate over europe
for key, a in europe.items():
    print ("the capital of" +"  "+ key +"  "+  "is"  + "  "+str(a))

______________________________________________________________________
Loop over Numpy array
If you're dealing with a 1D Numpy array, looping over all elements can be as simple as:

for x in my_array :
    ...
If you're dealing with a 2D Numpy array, it's more complicated. A 2D array is built up of multiple 1D arrays. 
To explicitly iterate over all separate elements of a multi-dimensional array, you'll need this syntax:

for x in np.nditer(my_array) :
    ...
Two Numpy arrays that you might recognize from the intro course are available in your Python session: np_height,
 a Numpy array containing the heights of Major League Baseball players, and np_baseball, a 2D Numpy array that 
contains both the heights (first column) 
and weights (second column) of those players.

_______________________________________________________________________
Import the numpy package under the local alias np.
Write a for loop that iterates over all elements in np_height and prints 
out "x inches" for each element, where x is the value in the array.
Write a for loop that visits every element of the np_baseball 
array and prints it out.

# Import numpy as np
import numpy as np

# For loop over np_height
for value in np.nditer(np_height):
    print(str(value) + " " + "inches")

# For loop over np_baseball
for elements in np.nditer(np_baseball):
    print(str(elements))

_______________________________________________________________________

Loop over DataFrame (1)
Iterating over a Pandas DataFrame is typically done with the iterrows() method. Used in a for loop, 
every observation is iterated over and on every iteration
 the row label and actual row contents are available:

for lab, row in brics.iterrows() :
    ...
In this and the following exercises you will be working on the cars DataFrame. 
It contains information on the cars per capita and whether people drive right or left for seven countries in the world.


__________________________________________________________

Write a for loop that iterates over the rows 
of cars and on each iteration perform two print() calls: one to print out the row label and 
one to print out all of the rows contents.

# Import cars data
import pandas as pd
cars = pd.read_csv('cars.csv', index_col = 0)

# Iterate over rows of cars
for a, row in cars.iterrows():
    print(a),
    print(row)

_____________________________
Using the iterators lab and row, adapt the 
code in the for loop such that the first iteration prints out "US: 809", the second iteration "AUS: 731", and so on.
The output should be in the 
form "country: cars_per_cap". Make sure to print out this exact string (with the correct spacing).
You can use str() to convert your 
integer data to a string so that you can print it in 
conjunction with the country label.

# Import cars data
import pandas as pd
cars = pd.read_csv('cars.csv', index_col = 0)

# Adapt for loop
for lab, row in cars.iterrows() :
    print(lab + ":"+ " "+ str(row["cars_per_cap"]))

________________________________________________
# Import cars data
import pandas as pd
cars = pd.read_csv('cars.csv', index_col = 0)

# Code for loop that adds COUNTRY column

for lab, row in cars.iterrows():
    cars.loc[lab, "COUNTRY"]= row['country'].upper()


# Print cars
print(cars)
print(cars)
________________________________________
# Import cars data
import pandas as pd
cars = pd.read_csv('cars.csv', index_col = 0)

# Use .apply(str.upper)
cars[ "COUNTRY"] = cars["country"].apply(str.upper)
_____________________________________________________

# Import numpy as np
import numpy as np

# Set the seed
np.random.seed(123)

# Generate and print random float
print(np.random.rand())
____________________
# Import numpy and set seed
import numpy as np
np.random.seed(123)

# Use randint() to simulate a dice
print(np.random.randint(1, 7))

# Use randint() again
print(np.random.randint(1, 7))
_____________________
# Numpy is imported, seed is set

# Starting step
step = 50

# Roll the dice
dice = np.random.randint(1, 7)

# Finish the control construct
if dice <= 2 :
    step = step - 1
elif dice < 6 :
    step = step + 1
else :
    step = step + np.random.randint(1,7)

# Print out dice and step
print(dice)
print(step)
_________________________________
# Initialize random_walk
random_walk = [0]

for x in range(100) :
    step = random_walk[-1]
    dice = np.random.randint(1,7)

    if dice <= 2:
        # Replace below: use max to make sure step can't go below 0
        step = max(0, step - 1)
    elif dice <= 5:
        step = step + 1
    else:
        step = step + np.random.randint(1,7)

    random_walk.append(step)

print(random_walk)
____________________________________________________________
# Numpy is imported, seed is set

# Initialization
random_walk = [0]

for x in range(100) :
    step = random_walk[-1]
    dice = np.random.randint(1,7)

    if dice <= 2:
        step = max(0, step - 1)
    elif dice <= 5:
        step = step + 1
    else:
        step = step + np.random.randint(1,7)

    random_walk.append(step)

# Import matplotlib.pyplot as plt
import matplotlib.pyplot as plt

# Plot random_walk
plt.plot(random_walk)

# Show the plot
plt.show()
_______________________________________________
# Numpy is imported; seed is set

# Initialize all_walks (don't change this line)
all_walks = []

# Simulate random walk 10 times
for i in range(10) :
    # Code from before
    random_walk = [0]
    for x in range(100) :
        step = random_walk[-1]
        dice = np.random.randint(1,7)

        if dice <= 2:
            step = max(0, step - 1)
        elif dice <= 5:
            step = step + 1
        else:
            step = step + np.random.randint(1,7)
        random_walk.append(step)

    # Append random_walk to all_walks
    all_walks.append(random_walk)

# Print all_walks
print(all_walks)
___________________________________________________
# numpy and matplotlib imported, seed set.

# initialize and populate all_walks
all_walks = []
for i in range(10) :
    random_walk = [0]
    for x in range(100) :
        step = random_walk[-1]
        dice = np.random.randint(1,7)
        if dice <= 2:
            step = max(0, step - 1)
        elif dice <= 5:
            step = step + 1
        else:
            step = step + np.random.randint(1,7)
        random_walk.append(step)
    all_walks.append(random_walk)

# Convert all_walks to Numpy array: np_aw
np_aw = np.array(all_walks)

# Plot np_aw and show
plt.plot(np_aw)
plt.show()

# Clear the figure
plt.clf()

# Transpose np_aw: np_aw_t
np_aw_t = np.transpose(np_aw)

# Plot np_aw_t and show
plt.plot(np_aw_t)
plt.show()
____________________________________________
# numpy and matplotlib imported, seed set

# Simulate random walk 250 times
all_walks = []
for i in range(250) :
    random_walk = [0]
    for x in range(100) :
        step = random_walk[-1]
        dice = np.random.randint(1,7)
        if dice <= 2:
            step = max(0, step - 1)
        elif dice <= 5:
            step = step + 1
        else:
            step = step + np.random.randint(1,7)

        # Implement clumsiness
        if np.random.rand() <= 1e-3 :
            step = 0

        random_walk.append(step)
    all_walks.append(random_walk)

# Create and plot np_aw_t
np_aw_t = np.transpose(np.array(all_walks))
plt.plot(np_aw_t)
plt.show()
__________________________________________________________
# numpy and matplotlib imported, seed set
all_walks = []
# Simulate random walk 500 times
for i in range(500) :
    random_walk = [0]
    for x in range(100) :
        step = random_walk[-1]
        dice = np.random.randint(1,7)
        if dice <= 2:
            step = max(0, step - 1)
        elif dice <= 5:
            step = step + 1
        else:
            step = step + np.random.randint(1,7)
        if np.random.rand() <= 0.001 :
            step = 0
        random_walk.append(step)
    all_walks.append(random_walk)

# Create and plot np_aw_t
np_aw_t = np.transpose(np.array(all_walks))

# Select last row from np_aw_t: ends
ends = np.array(np_aw_t[-1])

# Plot histogram of ends, display plot
plt.hist(ends)
plt.show()
___________________________________________
